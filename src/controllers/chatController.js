import aiService from '../services/aiService.js';

class ChatController {
  async analyzeSymptoms(req, res) {
    try {
      const { symptoms, userLocation, conversationHistory } = req.body;
      if (!symptoms || typeof symptoms !== 'string') {
        return res.status(400).json({
          error: 'S√≠ntomas requeridos',
          message: 'Debes proporcionar los s√≠ntomas a analizar'
        });
      }
      console.log('üîç Analizando s√≠ntomas:', symptoms.substring(0, 50) + '...');
      const analysis = await aiService.analyzeSymptoms(
        symptoms, 
        userLocation, 
        conversationHistory || []
      );
      console.log('‚úÖ An√°lisis completado');
      res.json({
        success: true,
        data: analysis
      });
    } catch (error) {
      console.error('‚ùå Error en an√°lisis de s√≠ntomas:', error);
      res.status(500).json({
        error: 'Error interno del servidor',
        message: error.message || 'Error procesando la solicitud'
      });
    }
  }

  async testConnection(req, res) {
    try {
      const isConnected = await aiService.testGeminiConnection();
      res.json({
        success: true,
        connected: isConnected,
        message: isConnected ? 'IA conectada correctamente' : 'Error de conexi√≥n con IA'
      });
    } catch (error) {
      console.error('‚ùå Error probando conexi√≥n IA:', error);
      res.status(500).json({
        error: 'Error interno del servidor',
        message: error.message || 'Error probando conexi√≥n'
      });
    }
  }

  async getServiceInfo(req, res) {
    try {
      const isConnected = await aiService.testGeminiConnection();
      res.json({
        success: true,
        service: 'Xana AI Chat Service',
        connected: isConnected,
        features: [
          'An√°lisis de s√≠ntomas',
          'Evaluaci√≥n de urgencia',
          'Recomendaciones m√©dicas',
          'Identificaci√≥n de especialidades',
          'Historial de conversaci√≥n'
        ],
        timestamp: new Date().toISOString()
      });
    } catch (error) {
      console.error('‚ùå Error obteniendo informaci√≥n del servicio:', error);
      res.status(500).json({
        error: 'Error interno del servidor',
        message: error.message || 'Error obteniendo informaci√≥n'
      });
    }
  }

  async filterMedicalCenters(req, res) {
    try {
      const { places } = req.body;
      if (!Array.isArray(places) || places.length === 0) {
        return res.status(400).json({
          error: 'Lista de lugares requerida',
          message: 'Debes enviar un array de lugares a filtrar'
        });
      }
      const filtered = await aiService.filterValidMedicalCentersWithAI(places);
      res.json({ success: true, data: filtered });
    } catch (error) {
      console.error('‚ùå Error filtrando centros m√©dicos:', error);
      res.status(500).json({
        error: 'Error interno del servidor',
        message: error.message || 'Error procesando la solicitud'
      });
    }
  }

  async recommendMedicalCenters(req, res) {
    try {
      const { places, conversationHistory } = req.body;
      if (!Array.isArray(places) || places.length === 0) {
        return res.status(400).json({
          error: 'Lista de lugares requerida',
          message: 'Debes enviar un array de lugares cercanos para recomendar'
        });
      }
      // L√≥gica principal delegada al servicio
      const result = await aiService.recommendMedicalCenters(places, conversationHistory || []);
      res.json({ success: true, ...result });
    } catch (error) {
      console.error('‚ùå Error recomendando centros m√©dicos:', error);
      res.status(500).json({
        error: 'Error interno del servidor',
        message: error.message || 'Error procesando la solicitud'
      });
    }
  }
}

export default new ChatController(); 